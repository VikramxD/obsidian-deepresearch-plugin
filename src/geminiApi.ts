import { requestUrl } from 'obsidian';
import { GeminiAssistantSettings } from './settings';

export class GeminiAPIService {
    private apiKey: string;
    private modelName: string;

    constructor(settings: GeminiAssistantSettings) {
        this.apiKey = settings.apiKey;
        this.modelName = settings.modelName;
    }

    public updateSettings(settings: GeminiAssistantSettings): void {
        this.apiKey = settings.apiKey;
        this.modelName = settings.modelName;
    }

    public async generateContent(prompt: string): Promise<string> {
        if (!this.apiKey) {
            throw new Error('API key is not set. Please configure it in the settings.');
        }

        const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/${this.modelName}:generateContent?key=${this.apiKey}`;
        
        try {
            const response = await requestUrl({
                url: endpoint,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [
                        {
                            parts: [
                                {
                                    text: prompt
                                }
                            ]
                        }
                    ],
                    generationConfig: {
                        temperature: 0.7,
                        topK: 40,
                        topP: 0.95,
                        maxOutputTokens: 1024,
                    }
                })
            });

            if (response.status !== 200) {
                throw new Error(`API request failed with status ${response.status}: ${response.text}`);
            }

            const responseData = response.json;
            
            // Log the response for debugging
            console.log('Gemini API response:', JSON.stringify(responseData));
            
            // Extract the generated text from the response
            if (responseData.candidates && 
                responseData.candidates.length > 0 && 
                responseData.candidates[0].content && 
                responseData.candidates[0].content.parts && 
                responseData.candidates[0].content.parts.length > 0) {
                
                const generatedText = responseData.candidates[0].content.parts[0].text;
                
                // Check if the text is empty and provide more specific error
                if (!generatedText || generatedText.trim() === '') {
                    throw new Error('Gemini returned an empty response. Try rephrasing your prompt or check API settings.');
                }
                
                return generatedText;
            } else if (responseData.promptFeedback && responseData.promptFeedback.blockReason) {
                // Handle content filtering blocks
                throw new Error(`Content blocked by Gemini API. Reason: ${responseData.promptFeedback.blockReason}`);
            } else {
                console.error('Unexpected API response structure:', responseData);
                throw new Error('No content generated by Gemini API. Check console for details.');
            }
        } catch (error) {
            console.error('Gemini API error:', error);
            throw error;
        }
    }
} 